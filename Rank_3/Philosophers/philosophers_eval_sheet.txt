
1
SCALE FOR PROJECT PHILOSOPHERS(/PROJECTS/42CURSUS-PHILOSOPHERS)
You should evaluate 1 student in this team
Git repository
IntroductionPlease comply with the following rules:- Remain polite, courteous, respectful and constructive throughout theevaluation process. The well-being of the community depends on it.- Identify with the student or group whose work is evaluated the possibledysfunctions in their project. Take the time to discuss and debate theproblems that may have been identified.- You must consider that there might be some differences in how your peersmight have understood the project's instructions and the scope of itsfunctionalities. Always keep an open mind and grade them as honestly aspossible. The pedagogy is useful only and only if the peer-evaluation isdone seriously.
Guidelines- Only grade the work that was turned in the Git repository of the evaluatedstudent or group.- Double-check that the Git repository belongs to the student(s). Ensure thatthe project is the one expected. Also, check that 'git clone' is used in anempty folder.- Check carefully that no malicious aliases was used to fool you and make youevaluate something that is not the content of the official repository.- To avoid any surprises and if applicable, review together any scripts usedto facilitate the grading (scripts for testing or automation).- If you have not completed the assignment you are going to evaluate, you have

git@vogsphere.42wolfsburg.de:vogsphere/intra-uuid-47e35a2
(https://profile.intra.42.fr)
 (https://profile.intra.42.fr/searches) cgodecke
to read the entire subject prior to starting the evaluation process.- Use the available flags to report an empty repository, a non-functioningprogram, a Norm error, cheating, and so forth.In these cases, the evaluation process ends and the final grade is 0,or -42 in case of cheating. However, except for cheating, student arestrongly encouraged to review together the work that was turned in, in orderto identify any mistakes that shouldn't be repeated in the future.- Remember that for the duration of the defense, no segfault, no otherunexpected, premature, uncontrolled or unexpected termination of theprogram, else the final grade is 0. Use the appropriate flag.You should never have to edit any file except the configuration file if itexists. If you want to edit a file, take the time to explicit the reasonswith the evaluated student and make sure both of you are okay with this.- You must verify the absence of data races.You are allowed to use any of the different tools available on the computer,such as valgrind with "--tool=helgrind" and "--tool=drd". In case of anydata-race, the evaluation stops here.- You must also verify the absence of memory leaks. Any memory allocated onthe heap must be properly freed before the end of execution. You areallowed to use any of the different tools available on the computer, suchas leaks, valgrind, or e_fence. In case of memory leaks, tick theappropriate flag.
Attachments
 subject.pdf (https://cdn.intra.42.fr/pdf/pdf/89200/en.subject.pdf)
Mandatory Part
Error Handling
This project is to be coded in C, following the Norm.Any crash, undefined behavior, memory leak, or norm error means 0 tothe project.On some slow hardware, the project might not work properly. If some testsdon't work on your machine try to discuss it honestly before counting itas false.
Global variables
Check if there is any global variable which is used to manage the sharedresources among the philosophers.If you find such a nasty thing, the evaluation stops here. You can go on
 Yes  No
and check the code, but do not grade the exercises.
philo code
Ensure the code of philo complies with the following requirements and ask for explanations.Check there is one thread per philosopher.Check there is only one fork per philosopher.Check if there is a mutex per fork and that it's used to check the fork value and/or change it.Check the outputs are never mixed up.Check how the death of a philosopher is verified and if there is a mutex to prevent a philosopher fromdying and starting eating at the same time.
philo testing
Do not test with more than 200 philosophers.Do not test with time_to_die or time_to_eat or time_to_sleep set to values lower than 60 ms.Test 1 800 200 200. The philosopher should not eat and should die.Test 5 800 200 200. No philosopher should die.Test 5 800 200 200 7. No philosopher should die and the simulation should stop when everyphilosopher has eaten at least 7 times.Test 4 410 200 200. No philosopher should die.Test 4 310 200 100. One philosopher should die.Test with 2 philosophers and check the different times: a death delayed by more than 10 ms isunacceptable.Test with any values of your choice to verify all the requirements. Ensure philosophers die at the right time,that they don't steal forks, and so forth.
Bonus part
philo_bonus code
Ensure the code of philo_bonus complies with the following requirements and ask for explanations.Check that there is one process per philosopher and that the main process is not a philosopher.Check that there are no orphan processes at the end of the execution of this program.Check if there is a single semaphore that represents the number of forks.Check the output is protected against multiple access. To avoid a scrambled display.Check how the death of a philosopher is verified and if there is a semaphore to prevent a philosopherfrom dying and starting eating at the same time.
 Yes  No
 Yes  No
 Yes  No
 Yes  No
Finish evaluation
philo_bonus testing
Do not test with more than 200 philosophers.Do not test with time_to_die or time_to_eat or time_to_sleep set to values lower than 60 ms.Test 5 800 200 200. No philosopher should die.Test 5 800 200 200 7. No philosopher should die and the simulation should stop when everyphilosopher has eaten at least 7 times.Test 4 410 200 200. No philosopher should die.Test 4 310 200 100. One philosopher should die.Test with 2 philosophers and check the different times: a death delayed by more than 10 ms isunacceptable.Test with any values of your choice to verify all the requirements. Ensure philosophers die at the right time,that they don't steal forks, and so forth.
 Yes  No
RatingsDon’t forget to check the flag corresponding to the defense
 Ok  Outstanding projectEmpty work  Incomplete work W Invalid compilation  Norme  Cheat
d Crash  Concerning situation  Leaks l Forbidden function
 Can’t support / explain code
ConclusionLeave a comment on this evaluation
Rules of procedure (https://profile.intra.42.fr/legal/terms/4)Declaration on the use of cookies (https://profile.intra.42.fr/legal/terms/2)Privacy policy (https://profile.intra.42.fr/legal/terms/5)General term of use of the site (https://profile.intra.42.fr/legal/terms/6)Terms of use for video surveillance (https://profile.intra.42.fr/legal/terms/1)Legal notices (https://profile.intra.42.fr/legal/terms/3)
